// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pynq_dsp_hls,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=2309,HLS_SYN_LUT=4189,HLS_VERSION=2019_1_3}" *)

module pynq_dsp_hls (
        ap_clk,
        ap_rst_n,
        lrclk_V,
        m_axi_physMemPtr_V_AWVALID,
        m_axi_physMemPtr_V_AWREADY,
        m_axi_physMemPtr_V_AWADDR,
        m_axi_physMemPtr_V_AWID,
        m_axi_physMemPtr_V_AWLEN,
        m_axi_physMemPtr_V_AWSIZE,
        m_axi_physMemPtr_V_AWBURST,
        m_axi_physMemPtr_V_AWLOCK,
        m_axi_physMemPtr_V_AWCACHE,
        m_axi_physMemPtr_V_AWPROT,
        m_axi_physMemPtr_V_AWQOS,
        m_axi_physMemPtr_V_AWREGION,
        m_axi_physMemPtr_V_AWUSER,
        m_axi_physMemPtr_V_WVALID,
        m_axi_physMemPtr_V_WREADY,
        m_axi_physMemPtr_V_WDATA,
        m_axi_physMemPtr_V_WSTRB,
        m_axi_physMemPtr_V_WLAST,
        m_axi_physMemPtr_V_WID,
        m_axi_physMemPtr_V_WUSER,
        m_axi_physMemPtr_V_ARVALID,
        m_axi_physMemPtr_V_ARREADY,
        m_axi_physMemPtr_V_ARADDR,
        m_axi_physMemPtr_V_ARID,
        m_axi_physMemPtr_V_ARLEN,
        m_axi_physMemPtr_V_ARSIZE,
        m_axi_physMemPtr_V_ARBURST,
        m_axi_physMemPtr_V_ARLOCK,
        m_axi_physMemPtr_V_ARCACHE,
        m_axi_physMemPtr_V_ARPROT,
        m_axi_physMemPtr_V_ARQOS,
        m_axi_physMemPtr_V_ARREGION,
        m_axi_physMemPtr_V_ARUSER,
        m_axi_physMemPtr_V_RVALID,
        m_axi_physMemPtr_V_RREADY,
        m_axi_physMemPtr_V_RDATA,
        m_axi_physMemPtr_V_RLAST,
        m_axi_physMemPtr_V_RID,
        m_axi_physMemPtr_V_RUSER,
        m_axi_physMemPtr_V_RRESP,
        m_axi_physMemPtr_V_BVALID,
        m_axi_physMemPtr_V_BREADY,
        m_axi_physMemPtr_V_BRESP,
        m_axi_physMemPtr_V_BID,
        m_axi_physMemPtr_V_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 50'd1;
parameter    ap_ST_fsm_state2 = 50'd2;
parameter    ap_ST_fsm_state3 = 50'd4;
parameter    ap_ST_fsm_state4 = 50'd8;
parameter    ap_ST_fsm_state5 = 50'd16;
parameter    ap_ST_fsm_state6 = 50'd32;
parameter    ap_ST_fsm_state7 = 50'd64;
parameter    ap_ST_fsm_state8 = 50'd128;
parameter    ap_ST_fsm_state9 = 50'd256;
parameter    ap_ST_fsm_state10 = 50'd512;
parameter    ap_ST_fsm_state11 = 50'd1024;
parameter    ap_ST_fsm_state12 = 50'd2048;
parameter    ap_ST_fsm_state13 = 50'd4096;
parameter    ap_ST_fsm_state14 = 50'd8192;
parameter    ap_ST_fsm_state15 = 50'd16384;
parameter    ap_ST_fsm_state16 = 50'd32768;
parameter    ap_ST_fsm_state17 = 50'd65536;
parameter    ap_ST_fsm_state18 = 50'd131072;
parameter    ap_ST_fsm_state19 = 50'd262144;
parameter    ap_ST_fsm_state20 = 50'd524288;
parameter    ap_ST_fsm_state21 = 50'd1048576;
parameter    ap_ST_fsm_state22 = 50'd2097152;
parameter    ap_ST_fsm_state23 = 50'd4194304;
parameter    ap_ST_fsm_state24 = 50'd8388608;
parameter    ap_ST_fsm_state25 = 50'd16777216;
parameter    ap_ST_fsm_state26 = 50'd33554432;
parameter    ap_ST_fsm_state27 = 50'd67108864;
parameter    ap_ST_fsm_state28 = 50'd134217728;
parameter    ap_ST_fsm_state29 = 50'd268435456;
parameter    ap_ST_fsm_state30 = 50'd536870912;
parameter    ap_ST_fsm_state31 = 50'd1073741824;
parameter    ap_ST_fsm_state32 = 50'd2147483648;
parameter    ap_ST_fsm_state33 = 50'd4294967296;
parameter    ap_ST_fsm_state34 = 50'd8589934592;
parameter    ap_ST_fsm_state35 = 50'd17179869184;
parameter    ap_ST_fsm_state36 = 50'd34359738368;
parameter    ap_ST_fsm_state37 = 50'd68719476736;
parameter    ap_ST_fsm_state38 = 50'd137438953472;
parameter    ap_ST_fsm_state39 = 50'd274877906944;
parameter    ap_ST_fsm_state40 = 50'd549755813888;
parameter    ap_ST_fsm_state41 = 50'd1099511627776;
parameter    ap_ST_fsm_state42 = 50'd2199023255552;
parameter    ap_ST_fsm_state43 = 50'd4398046511104;
parameter    ap_ST_fsm_state44 = 50'd8796093022208;
parameter    ap_ST_fsm_state45 = 50'd17592186044416;
parameter    ap_ST_fsm_state46 = 50'd35184372088832;
parameter    ap_ST_fsm_state47 = 50'd70368744177664;
parameter    ap_ST_fsm_state48 = 50'd140737488355328;
parameter    ap_ST_fsm_state49 = 50'd281474976710656;
parameter    ap_ST_fsm_state50 = 50'd562949953421312;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_PHYSMEMPTR_V_ID_WIDTH = 1;
parameter    C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH = 32;
parameter    C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH = 32;
parameter    C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH = 1;
parameter    C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH = 1;
parameter    C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH = 1;
parameter    C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH = 1;
parameter    C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH = 1;
parameter    C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR = 0;
parameter    C_M_AXI_PHYSMEMPTR_V_USER_VALUE = 0;
parameter    C_M_AXI_PHYSMEMPTR_V_PROT_VALUE = 0;
parameter    C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_PHYSMEMPTR_V_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [0:0] lrclk_V;
output   m_axi_physMemPtr_V_AWVALID;
input   m_axi_physMemPtr_V_AWREADY;
output  [C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH - 1:0] m_axi_physMemPtr_V_AWADDR;
output  [C_M_AXI_PHYSMEMPTR_V_ID_WIDTH - 1:0] m_axi_physMemPtr_V_AWID;
output  [7:0] m_axi_physMemPtr_V_AWLEN;
output  [2:0] m_axi_physMemPtr_V_AWSIZE;
output  [1:0] m_axi_physMemPtr_V_AWBURST;
output  [1:0] m_axi_physMemPtr_V_AWLOCK;
output  [3:0] m_axi_physMemPtr_V_AWCACHE;
output  [2:0] m_axi_physMemPtr_V_AWPROT;
output  [3:0] m_axi_physMemPtr_V_AWQOS;
output  [3:0] m_axi_physMemPtr_V_AWREGION;
output  [C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH - 1:0] m_axi_physMemPtr_V_AWUSER;
output   m_axi_physMemPtr_V_WVALID;
input   m_axi_physMemPtr_V_WREADY;
output  [C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH - 1:0] m_axi_physMemPtr_V_WDATA;
output  [C_M_AXI_PHYSMEMPTR_V_WSTRB_WIDTH - 1:0] m_axi_physMemPtr_V_WSTRB;
output   m_axi_physMemPtr_V_WLAST;
output  [C_M_AXI_PHYSMEMPTR_V_ID_WIDTH - 1:0] m_axi_physMemPtr_V_WID;
output  [C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH - 1:0] m_axi_physMemPtr_V_WUSER;
output   m_axi_physMemPtr_V_ARVALID;
input   m_axi_physMemPtr_V_ARREADY;
output  [C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH - 1:0] m_axi_physMemPtr_V_ARADDR;
output  [C_M_AXI_PHYSMEMPTR_V_ID_WIDTH - 1:0] m_axi_physMemPtr_V_ARID;
output  [7:0] m_axi_physMemPtr_V_ARLEN;
output  [2:0] m_axi_physMemPtr_V_ARSIZE;
output  [1:0] m_axi_physMemPtr_V_ARBURST;
output  [1:0] m_axi_physMemPtr_V_ARLOCK;
output  [3:0] m_axi_physMemPtr_V_ARCACHE;
output  [2:0] m_axi_physMemPtr_V_ARPROT;
output  [3:0] m_axi_physMemPtr_V_ARQOS;
output  [3:0] m_axi_physMemPtr_V_ARREGION;
output  [C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH - 1:0] m_axi_physMemPtr_V_ARUSER;
input   m_axi_physMemPtr_V_RVALID;
output   m_axi_physMemPtr_V_RREADY;
input  [C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH - 1:0] m_axi_physMemPtr_V_RDATA;
input   m_axi_physMemPtr_V_RLAST;
input  [C_M_AXI_PHYSMEMPTR_V_ID_WIDTH - 1:0] m_axi_physMemPtr_V_RID;
input  [C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH - 1:0] m_axi_physMemPtr_V_RUSER;
input  [1:0] m_axi_physMemPtr_V_RRESP;
input   m_axi_physMemPtr_V_BVALID;
output   m_axi_physMemPtr_V_BREADY;
input  [1:0] m_axi_physMemPtr_V_BRESP;
input  [C_M_AXI_PHYSMEMPTR_V_ID_WIDTH - 1:0] m_axi_physMemPtr_V_BID;
input  [C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH - 1:0] m_axi_physMemPtr_V_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [49:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [0:0] lrclk_V_0_data_reg;
reg    lrclk_V_0_vld_reg;
reg    lrclk_V_0_ack_out;
wire   [31:0] basePhysAddr_V;
reg   [3:0] configReg_address0;
reg    configReg_ce0;
wire   [31:0] configReg_q0;
reg   [0:0] readyRch;
reg   [0:0] readyLch;
reg    physMemPtr_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    physMemPtr_V_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln761_fu_382_p2;
wire   [0:0] or_ln104_fu_422_p2;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg    physMemPtr_V_blk_n_AW;
wire    ap_CS_fsm_state43;
reg    physMemPtr_V_blk_n_W;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
reg    physMemPtr_V_blk_n_B;
wire    ap_CS_fsm_state50;
reg   [0:0] icmp_ln761_reg_1213;
reg   [0:0] or_ln104_reg_1222;
reg    physMemPtr_V_AWVALID;
wire    physMemPtr_V_AWREADY;
wire   [31:0] physMemPtr_V_AWADDR;
reg    physMemPtr_V_WVALID;
wire    physMemPtr_V_WREADY;
reg   [31:0] physMemPtr_V_WDATA;
reg    physMemPtr_V_ARVALID;
wire    physMemPtr_V_ARREADY;
reg   [31:0] physMemPtr_V_ARADDR;
reg   [31:0] physMemPtr_V_ARLEN;
wire    physMemPtr_V_RVALID;
reg    physMemPtr_V_RREADY;
wire   [31:0] physMemPtr_V_RDATA;
wire    physMemPtr_V_RLAST;
wire   [0:0] physMemPtr_V_RID;
wire   [0:0] physMemPtr_V_RUSER;
wire   [1:0] physMemPtr_V_RRESP;
wire    physMemPtr_V_BVALID;
reg    physMemPtr_V_BREADY;
wire   [1:0] physMemPtr_V_BRESP;
wire   [0:0] physMemPtr_V_BID;
wire   [0:0] physMemPtr_V_BUSER;
wire   [31:0] grp_fu_303_p2;
reg   [31:0] reg_336;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln887_fu_448_p2;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state37;
wire   [29:0] r_V_fu_352_p4;
reg   [29:0] r_V_reg_1179;
wire   [30:0] zext_ln215_fu_362_p1;
reg   [30:0] zext_ln215_reg_1184;
wire   [30:0] ret_V_fu_366_p2;
reg   [30:0] ret_V_reg_1189;
reg   [31:0] status_V_reg_1208;
reg    ap_predicate_op93_readreq_state10;
reg    ap_block_state10_io;
wire   [0:0] xor_ln99_fu_400_p2;
reg   [31:0] p_Val2_3_reg_1246;
reg   [31:0] p_Val2_4_reg_1251;
wire   [31:0] grp_fu_309_p1;
reg   [31:0] tmp_reg_1256;
wire    ap_CS_fsm_state23;
reg   [31:0] tmp_1_reg_1261;
wire    ap_CS_fsm_state24;
wire   [2:0] stageIndex_V_fu_454_p2;
reg   [2:0] stageIndex_V_reg_1269;
reg   [3:0] configReg_addr_1_reg_1279;
wire   [3:0] trunc_ln124_fu_488_p1;
reg   [3:0] trunc_ln124_reg_1284;
wire    ap_CS_fsm_state31;
reg   [31:0] configReg_load_1_reg_1288;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln257_2_fu_506_p2;
reg   [0:0] icmp_ln257_2_reg_1293;
wire   [0:0] icmp_ln257_3_fu_512_p2;
reg   [0:0] icmp_ln257_3_reg_1298;
wire   [31:0] threash_fu_518_p1;
reg   [31:0] threash_reg_1303;
wire   [31:0] labs_fu_542_p1;
reg   [31:0] labs_reg_1309;
wire   [0:0] or_ln257_fu_569_p2;
reg   [0:0] or_ln257_reg_1315;
wire   [0:0] icmp_ln72_fu_593_p2;
reg   [0:0] icmp_ln72_reg_1321;
wire   [0:0] icmp_ln72_1_fu_599_p2;
reg   [0:0] icmp_ln72_1_reg_1326;
wire   [31:0] ldst_fu_620_p3;
reg   [31:0] ldst_reg_1331;
wire    ap_CS_fsm_state35;
wire   [0:0] grp_fu_316_p2;
reg   [0:0] tmp_s_reg_1338;
wire   [0:0] grp_fu_321_p2;
reg   [0:0] tmp_11_reg_1343;
wire   [31:0] reg_V_fu_676_p1;
reg   [31:0] reg_V_reg_1348;
reg   [0:0] p_Result_5_reg_1353;
wire   [22:0] trunc_ln270_fu_706_p1;
reg   [22:0] trunc_ln270_reg_1358;
wire   [0:0] icmp_ln278_fu_710_p2;
reg   [0:0] icmp_ln278_reg_1363;
wire  signed [8:0] sh_amt_fu_716_p2;
reg  signed [8:0] sh_amt_reg_1370;
wire   [0:0] icmp_ln282_fu_722_p2;
reg   [0:0] icmp_ln282_reg_1378;
wire   [23:0] tmp_2_fu_728_p3;
reg   [23:0] tmp_2_reg_1384;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln285_fu_743_p2;
reg   [0:0] icmp_ln285_reg_1389;
wire  signed [8:0] sh_amt_1_fu_748_p2;
reg  signed [8:0] sh_amt_1_reg_1394;
wire   [0:0] and_ln284_fu_803_p2;
reg   [0:0] and_ln284_reg_1399;
wire   [23:0] select_ln285_fu_815_p3;
reg   [23:0] select_ln285_reg_1404;
wire   [0:0] and_ln295_fu_835_p2;
reg   [0:0] and_ln295_reg_1409;
wire   [31:0] reg_V_1_fu_841_p1;
reg   [31:0] reg_V_1_reg_1414;
reg   [0:0] p_Result_6_reg_1419;
wire   [22:0] trunc_ln270_1_fu_871_p1;
reg   [22:0] trunc_ln270_1_reg_1424;
wire   [0:0] icmp_ln278_1_fu_875_p2;
reg   [0:0] icmp_ln278_1_reg_1429;
wire  signed [8:0] sh_amt_2_fu_881_p2;
reg  signed [8:0] sh_amt_2_reg_1436;
wire   [0:0] icmp_ln282_1_fu_887_p2;
reg   [0:0] icmp_ln282_1_reg_1444;
wire   [31:0] select_ln285_1_fu_947_p3;
reg   [31:0] select_ln285_1_reg_1450;
wire    ap_CS_fsm_state42;
wire   [23:0] tmp_4_fu_955_p3;
reg   [23:0] tmp_4_reg_1456;
wire   [0:0] icmp_ln285_1_fu_970_p2;
reg   [0:0] icmp_ln285_1_reg_1461;
wire  signed [8:0] sh_amt_3_fu_975_p2;
reg  signed [8:0] sh_amt_3_reg_1466;
wire   [0:0] and_ln284_1_fu_1030_p2;
reg   [0:0] and_ln284_1_reg_1471;
wire   [23:0] select_ln285_2_fu_1042_p3;
reg   [23:0] select_ln285_2_reg_1476;
wire   [0:0] and_ln295_1_fu_1062_p2;
reg   [0:0] and_ln295_1_reg_1481;
wire   [30:0] ret_V_1_fu_1068_p2;
reg   [30:0] ret_V_1_reg_1486;
wire   [31:0] select_ln303_fu_1078_p3;
reg   [31:0] select_ln303_reg_1491;
wire   [31:0] select_ln285_3_fu_1138_p3;
reg   [31:0] select_ln285_3_reg_1496;
wire   [31:0] select_ln303_1_fu_1161_p3;
reg   [31:0] select_ln303_1_reg_1509;
reg   [2:0] t_V_reg_248;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
reg   [0:0] ap_phi_mux_readyRch_flag_1_phi_fu_263_p6;
reg   [0:0] readyRch_flag_1_reg_259;
reg    ap_predicate_op288_writeresp_state50;
reg    ap_block_state50;
reg   [0:0] ap_phi_mux_readyRch_new_1_phi_fu_278_p6;
reg   [0:0] readyRch_new_1_reg_273;
reg   [0:0] ap_phi_mux_readyLch_flag_1_phi_fu_293_p6;
reg   [0:0] readyLch_flag_1_reg_289;
wire   [63:0] zext_ln124_fu_468_p1;
wire   [63:0] tmp_12_fu_479_p3;
wire   [63:0] zext_ln544_fu_372_p1;
wire   [63:0] zext_ln544_1_fu_428_p1;
wire   [63:0] zext_ln544_2_fu_1146_p1;
reg   [31:0] currentData_rch_fu_160;
wire   [31:0] select_ln72_fu_659_p3;
reg   [31:0] x_assign_1_fu_164;
wire   [31:0] currentData_lch_fu_643_p3;
reg   [31:0] grp_fu_303_p0;
reg   [31:0] grp_fu_303_p1;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_309_p0;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_312_p0;
wire   [31:0] grp_fu_312_p1;
wire   [0:0] xor_ln104_fu_405_p2;
wire   [0:0] or_ln99_fu_395_p2;
wire   [0:0] and_ln104_fu_411_p2;
wire   [0:0] xor_ln104_1_fu_416_p2;
wire   [4:0] tmp_3_fu_460_p3;
wire   [4:0] or_ln64_fu_473_p2;
wire   [7:0] tmp_7_fu_492_p4;
wire   [22:0] trunc_ln257_1_fu_502_p1;
wire   [31:0] p_Val2_2_fu_522_p1;
wire   [30:0] trunc_ln368_fu_526_p1;
wire   [31:0] p_Result_4_fu_534_p3;
wire   [7:0] tmp_6_fu_547_p4;
wire   [22:0] trunc_ln257_fu_530_p1;
wire   [0:0] icmp_ln257_1_fu_563_p2;
wire   [0:0] icmp_ln257_fu_557_p2;
wire   [31:0] bitcast_ln72_fu_575_p1;
wire   [7:0] tmp_10_fu_579_p4;
wire   [22:0] trunc_ln72_fu_589_p1;
wire   [0:0] or_ln257_1_fu_605_p2;
wire   [0:0] and_ln257_fu_609_p2;
wire   [0:0] grp_fu_312_p2;
wire   [0:0] and_ln257_1_fu_614_p2;
wire   [31:0] bitcast_ln71_fu_630_p1;
wire   [31:0] xor_ln71_fu_633_p2;
wire   [0:0] and_ln71_fu_626_p2;
wire   [31:0] bitcast_ln71_1_fu_639_p1;
wire   [0:0] or_ln72_fu_650_p2;
wire   [0:0] and_ln72_fu_654_p2;
wire   [7:0] p_Result_s_fu_692_p4;
wire   [30:0] trunc_ln262_fu_680_p1;
wire   [8:0] exp_V_fu_702_p1;
wire   [3:0] tmp_5_fu_753_p4;
wire  signed [23:0] sext_ln281_fu_735_p1;
wire   [0:0] xor_ln278_fu_775_p2;
wire   [0:0] and_ln282_fu_780_p2;
wire   [0:0] or_ln282_fu_793_p2;
wire   [0:0] icmp_ln284_fu_738_p2;
wire   [0:0] xor_ln282_fu_797_p2;
wire   [0:0] and_ln285_fu_809_p2;
wire   [23:0] lshr_ln286_fu_769_p2;
wire   [23:0] select_ln282_fu_785_p3;
wire   [0:0] or_ln284_fu_823_p2;
wire   [0:0] icmp_ln295_fu_763_p2;
wire   [0:0] xor_ln284_fu_829_p2;
wire   [7:0] p_Result_8_fu_857_p4;
wire   [30:0] trunc_ln262_1_fu_845_p1;
wire   [8:0] exp_V_1_fu_867_p1;
wire   [0:0] tmp_9_fu_899_p3;
wire   [31:0] zext_ln283_fu_893_p1;
wire  signed [31:0] sext_ln294_fu_896_p1;
wire   [31:0] shl_ln297_fu_914_p2;
wire   [31:0] zext_ln285_fu_920_p1;
wire   [31:0] select_ln295_fu_923_p3;
wire   [0:0] xor_ln285_fu_937_p2;
wire   [0:0] and_ln285_1_fu_942_p2;
wire   [31:0] select_ln288_fu_906_p3;
wire   [31:0] select_ln278_fu_930_p3;
wire   [3:0] tmp_15_fu_980_p4;
wire  signed [23:0] sext_ln281_1_fu_962_p1;
wire   [0:0] xor_ln278_1_fu_1002_p2;
wire   [0:0] and_ln282_1_fu_1007_p2;
wire   [0:0] or_ln282_1_fu_1020_p2;
wire   [0:0] icmp_ln284_1_fu_965_p2;
wire   [0:0] xor_ln282_1_fu_1024_p2;
wire   [0:0] and_ln285_2_fu_1036_p2;
wire   [23:0] lshr_ln286_1_fu_996_p2;
wire   [23:0] select_ln282_1_fu_1012_p3;
wire   [0:0] or_ln284_1_fu_1050_p2;
wire   [0:0] icmp_ln295_1_fu_990_p2;
wire   [0:0] xor_ln284_1_fu_1056_p2;
wire   [31:0] sub_ln461_fu_1073_p2;
wire   [0:0] tmp_16_fu_1090_p3;
wire   [31:0] zext_ln283_1_fu_1084_p1;
wire  signed [31:0] sext_ln294_1_fu_1087_p1;
wire   [31:0] shl_ln297_1_fu_1105_p2;
wire   [31:0] zext_ln285_1_fu_1111_p1;
wire   [31:0] select_ln295_1_fu_1114_p3;
wire   [0:0] xor_ln285_1_fu_1128_p2;
wire   [0:0] and_ln285_3_fu_1133_p2;
wire   [31:0] select_ln288_1_fu_1097_p3;
wire   [31:0] select_ln278_1_fu_1121_p3;
wire   [31:0] sub_ln461_1_fu_1156_p2;
reg    grp_fu_309_ce;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
reg   [49:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 50'd1;
#0 lrclk_V_0_data_reg = 1'd0;
#0 lrclk_V_0_vld_reg = 1'b0;
#0 readyRch = 1'd0;
#0 readyLch = 1'd0;
end

pynq_dsp_hls_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
pynq_dsp_hls_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .basePhysAddr_V(basePhysAddr_V),
    .configReg_address0(configReg_address0),
    .configReg_ce0(configReg_ce0),
    .configReg_q0(configReg_q0)
);

pynq_dsp_hls_physMemPtr_V_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_PHYSMEMPTR_V_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_PHYSMEMPTR_V_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_PHYSMEMPTR_V_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_PHYSMEMPTR_V_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_PHYSMEMPTR_V_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_PHYSMEMPTR_V_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_PHYSMEMPTR_V_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_PHYSMEMPTR_V_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_PHYSMEMPTR_V_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_PHYSMEMPTR_V_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_PHYSMEMPTR_V_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_PHYSMEMPTR_V_CACHE_VALUE ))
pynq_dsp_hls_physMemPtr_V_m_axi_U(
    .AWVALID(m_axi_physMemPtr_V_AWVALID),
    .AWREADY(m_axi_physMemPtr_V_AWREADY),
    .AWADDR(m_axi_physMemPtr_V_AWADDR),
    .AWID(m_axi_physMemPtr_V_AWID),
    .AWLEN(m_axi_physMemPtr_V_AWLEN),
    .AWSIZE(m_axi_physMemPtr_V_AWSIZE),
    .AWBURST(m_axi_physMemPtr_V_AWBURST),
    .AWLOCK(m_axi_physMemPtr_V_AWLOCK),
    .AWCACHE(m_axi_physMemPtr_V_AWCACHE),
    .AWPROT(m_axi_physMemPtr_V_AWPROT),
    .AWQOS(m_axi_physMemPtr_V_AWQOS),
    .AWREGION(m_axi_physMemPtr_V_AWREGION),
    .AWUSER(m_axi_physMemPtr_V_AWUSER),
    .WVALID(m_axi_physMemPtr_V_WVALID),
    .WREADY(m_axi_physMemPtr_V_WREADY),
    .WDATA(m_axi_physMemPtr_V_WDATA),
    .WSTRB(m_axi_physMemPtr_V_WSTRB),
    .WLAST(m_axi_physMemPtr_V_WLAST),
    .WID(m_axi_physMemPtr_V_WID),
    .WUSER(m_axi_physMemPtr_V_WUSER),
    .ARVALID(m_axi_physMemPtr_V_ARVALID),
    .ARREADY(m_axi_physMemPtr_V_ARREADY),
    .ARADDR(m_axi_physMemPtr_V_ARADDR),
    .ARID(m_axi_physMemPtr_V_ARID),
    .ARLEN(m_axi_physMemPtr_V_ARLEN),
    .ARSIZE(m_axi_physMemPtr_V_ARSIZE),
    .ARBURST(m_axi_physMemPtr_V_ARBURST),
    .ARLOCK(m_axi_physMemPtr_V_ARLOCK),
    .ARCACHE(m_axi_physMemPtr_V_ARCACHE),
    .ARPROT(m_axi_physMemPtr_V_ARPROT),
    .ARQOS(m_axi_physMemPtr_V_ARQOS),
    .ARREGION(m_axi_physMemPtr_V_ARREGION),
    .ARUSER(m_axi_physMemPtr_V_ARUSER),
    .RVALID(m_axi_physMemPtr_V_RVALID),
    .RREADY(m_axi_physMemPtr_V_RREADY),
    .RDATA(m_axi_physMemPtr_V_RDATA),
    .RLAST(m_axi_physMemPtr_V_RLAST),
    .RID(m_axi_physMemPtr_V_RID),
    .RUSER(m_axi_physMemPtr_V_RUSER),
    .RRESP(m_axi_physMemPtr_V_RRESP),
    .BVALID(m_axi_physMemPtr_V_BVALID),
    .BREADY(m_axi_physMemPtr_V_BREADY),
    .BRESP(m_axi_physMemPtr_V_BRESP),
    .BID(m_axi_physMemPtr_V_BID),
    .BUSER(m_axi_physMemPtr_V_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(physMemPtr_V_ARVALID),
    .I_ARREADY(physMemPtr_V_ARREADY),
    .I_ARADDR(physMemPtr_V_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(physMemPtr_V_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(physMemPtr_V_RVALID),
    .I_RREADY(physMemPtr_V_RREADY),
    .I_RDATA(physMemPtr_V_RDATA),
    .I_RID(physMemPtr_V_RID),
    .I_RUSER(physMemPtr_V_RUSER),
    .I_RRESP(physMemPtr_V_RRESP),
    .I_RLAST(physMemPtr_V_RLAST),
    .I_AWVALID(physMemPtr_V_AWVALID),
    .I_AWREADY(physMemPtr_V_AWREADY),
    .I_AWADDR(physMemPtr_V_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd2),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(physMemPtr_V_WVALID),
    .I_WREADY(physMemPtr_V_WREADY),
    .I_WDATA(physMemPtr_V_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(physMemPtr_V_BVALID),
    .I_BREADY(physMemPtr_V_BREADY),
    .I_BRESP(physMemPtr_V_BRESP),
    .I_BID(physMemPtr_V_BID),
    .I_BUSER(physMemPtr_V_BUSER)
);

pynq_dsp_hls_fmulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pynq_dsp_hls_fmulbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

pynq_dsp_hls_sitocud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
pynq_dsp_hls_sitocud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_309_p0),
    .ce(grp_fu_309_ce),
    .dout(grp_fu_309_p1)
);

pynq_dsp_hls_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
pynq_dsp_hls_fcmpdEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_312_p0),
    .din1(grp_fu_312_p1),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_312_p2)
);

pynq_dsp_hls_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
pynq_dsp_hls_fcmpdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x_assign_1_fu_164),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_316_p2)
);

pynq_dsp_hls_fcmpdEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
pynq_dsp_hls_fcmpdEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(currentData_rch_fu_160),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_321_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln124_reg_1284 == 4'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        currentData_rch_fu_160 <= select_ln72_fu_659_p3;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        currentData_rch_fu_160 <= reg_336;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln761_fu_382_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (or_ln104_fu_422_p2 == 1'd1))) begin
        readyLch_flag_1_reg_289 <= xor_ln99_fu_400_p2;
    end else if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        readyLch_flag_1_reg_289 <= 1'd1;
    end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln761_fu_382_p2 == 1'd1))) begin
        readyLch_flag_1_reg_289 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln761_fu_382_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (or_ln104_fu_422_p2 == 1'd1))) begin
        readyRch_flag_1_reg_259 <= lrclk_V_0_data_reg;
    end else if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        readyRch_flag_1_reg_259 <= 1'd1;
    end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln761_fu_382_p2 == 1'd1))) begin
        readyRch_flag_1_reg_259 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln761_fu_382_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & (or_ln104_fu_422_p2 == 1'd1))) begin
        readyRch_new_1_reg_273 <= 1'd1;
    end else if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        readyRch_new_1_reg_273 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        t_V_reg_248 <= stageIndex_V_reg_1269;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        t_V_reg_248 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln124_reg_1284 == 4'd1) & (1'b1 == ap_CS_fsm_state36))) begin
        x_assign_1_fu_164 <= currentData_lch_fu_643_p3;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        x_assign_1_fu_164 <= reg_336;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        and_ln284_1_reg_1471 <= and_ln284_1_fu_1030_p2;
        icmp_ln285_1_reg_1461 <= icmp_ln285_1_fu_970_p2;
        ret_V_1_reg_1486 <= ret_V_1_fu_1068_p2;
        select_ln285_1_reg_1450 <= select_ln285_1_fu_947_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        and_ln284_reg_1399 <= and_ln284_fu_803_p2;
        icmp_ln278_1_reg_1429 <= icmp_ln278_1_fu_875_p2;
        icmp_ln282_1_reg_1444 <= icmp_ln282_1_fu_887_p2;
        icmp_ln285_reg_1389 <= icmp_ln285_fu_743_p2;
        p_Result_6_reg_1419 <= reg_V_1_fu_841_p1[32'd31];
        reg_V_1_reg_1414 <= reg_V_1_fu_841_p1;
        sh_amt_2_reg_1436 <= sh_amt_2_fu_881_p2;
        trunc_ln270_1_reg_1424 <= trunc_ln270_1_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_1_reg_1429 == 1'd0) & (1'b1 == ap_CS_fsm_state42))) begin
        and_ln295_1_reg_1481 <= and_ln295_1_fu_1062_p2;
        select_ln285_2_reg_1476 <= select_ln285_2_fu_1042_p3;
        sh_amt_3_reg_1466 <= sh_amt_3_fu_975_p2;
        tmp_4_reg_1456[22 : 0] <= tmp_4_fu_955_p3[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln278_reg_1363 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
        and_ln295_reg_1409 <= and_ln295_fu_835_p2;
        select_ln285_reg_1404 <= select_ln285_fu_815_p3;
        sh_amt_1_reg_1394 <= sh_amt_1_fu_748_p2;
        tmp_2_reg_1384[22 : 0] <= tmp_2_fu_728_p3[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        configReg_addr_1_reg_1279[3 : 2] <= tmp_12_fu_479_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        configReg_load_1_reg_1288 <= configReg_q0;
        icmp_ln257_2_reg_1293 <= icmp_ln257_2_fu_506_p2;
        icmp_ln257_3_reg_1298 <= icmp_ln257_3_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        icmp_ln278_reg_1363 <= icmp_ln278_fu_710_p2;
        icmp_ln282_reg_1378 <= icmp_ln282_fu_722_p2;
        p_Result_5_reg_1353 <= reg_V_fu_676_p1[32'd31];
        reg_V_reg_1348 <= reg_V_fu_676_p1;
        sh_amt_reg_1370 <= sh_amt_fu_716_p2;
        trunc_ln270_reg_1358 <= trunc_ln270_fu_706_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        icmp_ln72_1_reg_1326 <= icmp_ln72_1_fu_599_p2;
        icmp_ln72_reg_1321 <= icmp_ln72_fu_593_p2;
        labs_reg_1309[30 : 0] <= labs_fu_542_p1[30 : 0];
        or_ln257_reg_1315 <= or_ln257_fu_569_p2;
        threash_reg_1303 <= threash_fu_518_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        icmp_ln761_reg_1213 <= icmp_ln761_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        ldst_reg_1331 <= ldst_fu_620_p3;
        tmp_11_reg_1343 <= grp_fu_321_p2;
        tmp_s_reg_1338 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lrclk_V_0_vld_reg == 1'b0) & (1'b1 == 1'b1)) | (~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (lrclk_V_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (lrclk_V_0_vld_reg == 1'b1)))) begin
        lrclk_V_0_data_reg <= lrclk_V;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln761_fu_382_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        or_ln104_reg_1222 <= or_ln104_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        p_Val2_3_reg_1246 <= physMemPtr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        p_Val2_4_reg_1251 <= physMemPtr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_V_reg_1179 <= {{basePhysAddr_V[31:2]}};
        ret_V_reg_1189 <= ret_V_fu_366_p2;
        zext_ln215_reg_1184[29 : 0] <= zext_ln215_fu_362_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (ap_phi_mux_readyLch_flag_1_phi_fu_293_p6 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        readyLch <= ap_phi_mux_readyRch_new_1_phi_fu_278_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (ap_phi_mux_readyRch_flag_1_phi_fu_263_p6 == 1'd1) & (1'b1 == ap_CS_fsm_state50))) begin
        readyRch <= ap_phi_mux_readyRch_new_1_phi_fu_278_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_336 <= grp_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((physMemPtr_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        select_ln285_3_reg_1496 <= select_ln285_3_fu_1138_p3;
        select_ln303_reg_1491 <= select_ln303_fu_1078_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((physMemPtr_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
        select_ln303_1_reg_1509 <= select_ln303_1_fu_1161_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        stageIndex_V_reg_1269 <= stageIndex_V_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        status_V_reg_1208 <= physMemPtr_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        tmp_1_reg_1261 <= grp_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        tmp_reg_1256 <= grp_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        trunc_ln124_reg_1284 <= trunc_ln124_fu_488_p1;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_phi_mux_readyLch_flag_1_phi_fu_293_p6 = 1'd1;
    end else begin
        ap_phi_mux_readyLch_flag_1_phi_fu_293_p6 = readyLch_flag_1_reg_289;
    end
end

always @ (*) begin
    if (((or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_phi_mux_readyRch_flag_1_phi_fu_263_p6 = 1'd1;
    end else begin
        ap_phi_mux_readyRch_flag_1_phi_fu_263_p6 = readyRch_flag_1_reg_259;
    end
end

always @ (*) begin
    if (((or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_phi_mux_readyRch_new_1_phi_fu_278_p6 = 1'd0;
    end else begin
        ap_phi_mux_readyRch_new_1_phi_fu_278_p6 = readyRch_new_1_reg_273;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state50))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        configReg_address0 = configReg_addr_1_reg_1279;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        configReg_address0 = zext_ln124_fu_468_p1;
    end else begin
        configReg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30))) begin
        configReg_ce0 = 1'b1;
    end else begin
        configReg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_303_p0 = currentData_rch_fu_160;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_303_p0 = x_assign_1_fu_164;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_303_p0 = tmp_1_reg_1261;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_303_p0 = tmp_reg_1256;
    end else begin
        grp_fu_303_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_303_p1 = 32'd1258291200;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_303_p1 = 32'd872415232;
    end else begin
        grp_fu_303_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | ((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)))) begin
        grp_fu_309_ce = 1'b1;
    end else begin
        grp_fu_309_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_309_p0 = p_Val2_4_reg_1251;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_309_p0 = p_Val2_3_reg_1246;
    end else begin
        grp_fu_309_p0 = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state50)) | ((physMemPtr_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        lrclk_V_0_ack_out = 1'b1;
    end else begin
        lrclk_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op93_readreq_state10 == 1'b1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        physMemPtr_V_ARADDR = zext_ln544_1_fu_428_p1;
    end else if (((physMemPtr_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        physMemPtr_V_ARADDR = zext_ln544_fu_372_p1;
    end else begin
        physMemPtr_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((ap_predicate_op93_readreq_state10 == 1'b1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
        physMemPtr_V_ARLEN = 32'd2;
    end else if (((physMemPtr_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        physMemPtr_V_ARLEN = 32'd1;
    end else begin
        physMemPtr_V_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_predicate_op93_readreq_state10 == 1'b1) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10)) | ((physMemPtr_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        physMemPtr_V_ARVALID = 1'b1;
    end else begin
        physMemPtr_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((physMemPtr_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
        physMemPtr_V_AWVALID = 1'b1;
    end else begin
        physMemPtr_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (ap_predicate_op288_writeresp_state50 == 1'b1) & (1'b1 == ap_CS_fsm_state50))) begin
        physMemPtr_V_BREADY = 1'b1;
    end else begin
        physMemPtr_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18)) | ((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        physMemPtr_V_RREADY = 1'b1;
    end else begin
        physMemPtr_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        physMemPtr_V_WDATA = select_ln303_1_reg_1509;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        physMemPtr_V_WDATA = select_ln303_reg_1491;
    end else begin
        physMemPtr_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((physMemPtr_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((physMemPtr_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        physMemPtr_V_WVALID = 1'b1;
    end else begin
        physMemPtr_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((or_ln104_fu_422_p2 == 1'd0) & (icmp_ln761_fu_382_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        physMemPtr_V_blk_n_AR = m_axi_physMemPtr_V_ARREADY;
    end else begin
        physMemPtr_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        physMemPtr_V_blk_n_AW = m_axi_physMemPtr_V_AWREADY;
    end else begin
        physMemPtr_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0) & (1'b1 == ap_CS_fsm_state50))) begin
        physMemPtr_V_blk_n_B = m_axi_physMemPtr_V_BVALID;
    end else begin
        physMemPtr_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        physMemPtr_V_blk_n_R = m_axi_physMemPtr_V_RVALID;
    end else begin
        physMemPtr_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44))) begin
        physMemPtr_V_blk_n_W = m_axi_physMemPtr_V_WREADY;
    end else begin
        physMemPtr_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((physMemPtr_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((or_ln104_fu_422_p2 == 1'd0) & (icmp_ln761_fu_382_p2 == 1'd0) & (1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if (((1'b0 == ap_block_state10_io) & (1'b1 == ap_CS_fsm_state10) & ((or_ln104_fu_422_p2 == 1'd1) | (icmp_ln761_fu_382_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((physMemPtr_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln887_fu_448_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & ((trunc_ln124_fu_488_p1 == 4'd0) | ((trunc_ln124_fu_488_p1 == 4'd10) | ((trunc_ln124_fu_488_p1 == 4'd11) | ((trunc_ln124_fu_488_p1 == 4'd12) | ((trunc_ln124_fu_488_p1 == 4'd13) | ((trunc_ln124_fu_488_p1 == 4'd15) | (trunc_ln124_fu_488_p1 == 4'd14))))))))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((trunc_ln124_fu_488_p1 == 4'd1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((physMemPtr_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((physMemPtr_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((physMemPtr_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if ((~((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln104_fu_411_p2 = (xor_ln104_fu_405_p2 & lrclk_V_0_data_reg);

assign and_ln257_1_fu_614_p2 = (grp_fu_312_p2 & and_ln257_fu_609_p2);

assign and_ln257_fu_609_p2 = (or_ln257_reg_1315 & or_ln257_1_fu_605_p2);

assign and_ln282_1_fu_1007_p2 = (xor_ln278_1_fu_1002_p2 & icmp_ln282_1_reg_1444);

assign and_ln282_fu_780_p2 = (xor_ln278_fu_775_p2 & icmp_ln282_reg_1378);

assign and_ln284_1_fu_1030_p2 = (xor_ln282_1_fu_1024_p2 & icmp_ln284_1_fu_965_p2);

assign and_ln284_fu_803_p2 = (xor_ln282_fu_797_p2 & icmp_ln284_fu_738_p2);

assign and_ln285_1_fu_942_p2 = (xor_ln285_fu_937_p2 & and_ln284_reg_1399);

assign and_ln285_2_fu_1036_p2 = (icmp_ln285_1_fu_970_p2 & and_ln284_1_fu_1030_p2);

assign and_ln285_3_fu_1133_p2 = (xor_ln285_1_fu_1128_p2 & and_ln284_1_reg_1471);

assign and_ln285_fu_809_p2 = (icmp_ln285_fu_743_p2 & and_ln284_fu_803_p2);

assign and_ln295_1_fu_1062_p2 = (xor_ln284_1_fu_1056_p2 & icmp_ln295_1_fu_990_p2);

assign and_ln295_fu_835_p2 = (xor_ln284_fu_829_p2 & icmp_ln295_fu_763_p2);

assign and_ln71_fu_626_p2 = (tmp_s_reg_1338 & or_ln257_reg_1315);

assign and_ln72_fu_654_p2 = (tmp_11_reg_1343 & or_ln72_fu_650_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_io = ((ap_predicate_op93_readreq_state10 == 1'b1) & (physMemPtr_V_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state50 = ((ap_predicate_op288_writeresp_state50 == 1'b1) & (physMemPtr_V_BVALID == 1'b0));
end

always @ (*) begin
    ap_predicate_op288_writeresp_state50 = ((or_ln104_reg_1222 == 1'd0) & (icmp_ln761_reg_1213 == 1'd0));
end

always @ (*) begin
    ap_predicate_op93_readreq_state10 = ((or_ln104_fu_422_p2 == 1'd0) & (icmp_ln761_fu_382_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln71_1_fu_639_p1 = xor_ln71_fu_633_p2;

assign bitcast_ln71_fu_630_p1 = ldst_reg_1331;

assign bitcast_ln72_fu_575_p1 = currentData_rch_fu_160;

assign currentData_lch_fu_643_p3 = ((and_ln71_fu_626_p2[0:0] === 1'b1) ? bitcast_ln71_1_fu_639_p1 : ldst_reg_1331);

assign exp_V_1_fu_867_p1 = p_Result_8_fu_857_p4;

assign exp_V_fu_702_p1 = p_Result_s_fu_692_p4;

assign grp_fu_312_p0 = p_Result_4_fu_534_p3;

assign grp_fu_312_p1 = configReg_load_1_reg_1288;

assign icmp_ln257_1_fu_563_p2 = ((trunc_ln257_fu_530_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln257_2_fu_506_p2 = ((tmp_7_fu_492_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln257_3_fu_512_p2 = ((trunc_ln257_1_fu_502_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln257_fu_557_p2 = ((tmp_6_fu_547_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln278_1_fu_875_p2 = ((trunc_ln262_1_fu_845_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_710_p2 = ((trunc_ln262_fu_680_p1 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln282_1_fu_887_p2 = ((p_Result_8_fu_857_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_722_p2 = ((p_Result_s_fu_692_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_1_fu_965_p2 = (($signed(sh_amt_2_reg_1436) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_738_p2 = (($signed(sh_amt_reg_1370) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_1_fu_970_p2 = (($signed(sh_amt_2_reg_1436) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_743_p2 = (($signed(sh_amt_reg_1370) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln295_1_fu_990_p2 = (($signed(tmp_15_fu_980_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_763_p2 = (($signed(tmp_5_fu_753_p4) < $signed(4'd1)) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_599_p2 = ((trunc_ln72_fu_589_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_593_p2 = ((tmp_10_fu_579_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln761_fu_382_p2 = ((status_V_reg_1208 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_448_p2 = ((t_V_reg_248 == 3'd4) ? 1'b1 : 1'b0);

assign labs_fu_542_p1 = p_Result_4_fu_534_p3;

assign ldst_fu_620_p3 = ((and_ln257_1_fu_614_p2[0:0] === 1'b1) ? labs_reg_1309 : threash_reg_1303);

assign lshr_ln286_1_fu_996_p2 = tmp_4_fu_955_p3 >> sext_ln281_1_fu_962_p1;

assign lshr_ln286_fu_769_p2 = tmp_2_fu_728_p3 >> sext_ln281_fu_735_p1;

assign or_ln104_fu_422_p2 = (xor_ln104_1_fu_416_p2 | and_ln104_fu_411_p2);

assign or_ln257_1_fu_605_p2 = (icmp_ln257_3_reg_1298 | icmp_ln257_2_reg_1293);

assign or_ln257_fu_569_p2 = (icmp_ln257_fu_557_p2 | icmp_ln257_1_fu_563_p2);

assign or_ln282_1_fu_1020_p2 = (icmp_ln282_1_reg_1444 | icmp_ln278_1_reg_1429);

assign or_ln282_fu_793_p2 = (icmp_ln282_reg_1378 | icmp_ln278_reg_1363);

assign or_ln284_1_fu_1050_p2 = (or_ln282_1_fu_1020_p2 | icmp_ln284_1_fu_965_p2);

assign or_ln284_fu_823_p2 = (or_ln282_fu_793_p2 | icmp_ln284_fu_738_p2);

assign or_ln64_fu_473_p2 = (tmp_3_fu_460_p3 | 5'd1);

assign or_ln72_fu_650_p2 = (icmp_ln72_reg_1321 | icmp_ln72_1_reg_1326);

assign or_ln99_fu_395_p2 = (readyRch | lrclk_V_0_data_reg);

assign p_Result_4_fu_534_p3 = {{1'd0}, {trunc_ln368_fu_526_p1}};

assign p_Result_8_fu_857_p4 = {{reg_V_1_fu_841_p1[30:23]}};

assign p_Result_s_fu_692_p4 = {{reg_V_fu_676_p1[30:23]}};

assign p_Val2_2_fu_522_p1 = x_assign_1_fu_164;

assign physMemPtr_V_AWADDR = zext_ln544_2_fu_1146_p1;

assign r_V_fu_352_p4 = {{basePhysAddr_V[31:2]}};

assign reg_V_1_fu_841_p1 = reg_336;

assign reg_V_fu_676_p1 = reg_336;

assign ret_V_1_fu_1068_p2 = (31'd2 + zext_ln215_reg_1184);

assign ret_V_fu_366_p2 = (zext_ln215_fu_362_p1 + 31'd4);

assign select_ln278_1_fu_1121_p3 = ((icmp_ln278_1_reg_1429[0:0] === 1'b1) ? 32'd0 : select_ln295_1_fu_1114_p3);

assign select_ln278_fu_930_p3 = ((icmp_ln278_reg_1363[0:0] === 1'b1) ? 32'd0 : select_ln295_fu_923_p3);

assign select_ln282_1_fu_1012_p3 = ((and_ln282_1_fu_1007_p2[0:0] === 1'b1) ? tmp_4_fu_955_p3 : 24'd0);

assign select_ln282_fu_785_p3 = ((and_ln282_fu_780_p2[0:0] === 1'b1) ? tmp_2_fu_728_p3 : 24'd0);

assign select_ln285_1_fu_947_p3 = ((and_ln285_1_fu_942_p2[0:0] === 1'b1) ? select_ln288_fu_906_p3 : select_ln278_fu_930_p3);

assign select_ln285_2_fu_1042_p3 = ((and_ln285_2_fu_1036_p2[0:0] === 1'b1) ? lshr_ln286_1_fu_996_p2 : select_ln282_1_fu_1012_p3);

assign select_ln285_3_fu_1138_p3 = ((and_ln285_3_fu_1133_p2[0:0] === 1'b1) ? select_ln288_1_fu_1097_p3 : select_ln278_1_fu_1121_p3);

assign select_ln285_fu_815_p3 = ((and_ln285_fu_809_p2[0:0] === 1'b1) ? lshr_ln286_fu_769_p2 : select_ln282_fu_785_p3);

assign select_ln288_1_fu_1097_p3 = ((tmp_16_fu_1090_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln288_fu_906_p3 = ((tmp_9_fu_899_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign select_ln295_1_fu_1114_p3 = ((and_ln295_1_reg_1481[0:0] === 1'b1) ? shl_ln297_1_fu_1105_p2 : zext_ln285_1_fu_1111_p1);

assign select_ln295_fu_923_p3 = ((and_ln295_reg_1409[0:0] === 1'b1) ? shl_ln297_fu_914_p2 : zext_ln285_fu_920_p1);

assign select_ln303_1_fu_1161_p3 = ((p_Result_6_reg_1419[0:0] === 1'b1) ? sub_ln461_1_fu_1156_p2 : select_ln285_3_reg_1496);

assign select_ln303_fu_1078_p3 = ((p_Result_5_reg_1353[0:0] === 1'b1) ? sub_ln461_fu_1073_p2 : select_ln285_1_reg_1450);

assign select_ln72_fu_659_p3 = ((and_ln72_fu_654_p2[0:0] === 1'b1) ? bitcast_ln71_1_fu_639_p1 : ldst_reg_1331);

assign sext_ln281_1_fu_962_p1 = sh_amt_2_reg_1436;

assign sext_ln281_fu_735_p1 = sh_amt_reg_1370;

assign sext_ln294_1_fu_1087_p1 = sh_amt_3_reg_1466;

assign sext_ln294_fu_896_p1 = sh_amt_1_reg_1394;

assign sh_amt_1_fu_748_p2 = ($signed(9'd0) - $signed(sh_amt_reg_1370));

assign sh_amt_2_fu_881_p2 = (9'd150 - exp_V_1_fu_867_p1);

assign sh_amt_3_fu_975_p2 = ($signed(9'd0) - $signed(sh_amt_2_reg_1436));

assign sh_amt_fu_716_p2 = (9'd150 - exp_V_fu_702_p1);

assign shl_ln297_1_fu_1105_p2 = zext_ln283_1_fu_1084_p1 << sext_ln294_1_fu_1087_p1;

assign shl_ln297_fu_914_p2 = zext_ln283_fu_893_p1 << sext_ln294_fu_896_p1;

assign stageIndex_V_fu_454_p2 = (t_V_reg_248 + 3'd1);

assign sub_ln461_1_fu_1156_p2 = (32'd0 - select_ln285_3_reg_1496);

assign sub_ln461_fu_1073_p2 = (32'd0 - select_ln285_1_reg_1450);

assign threash_fu_518_p1 = configReg_load_1_reg_1288;

assign tmp_10_fu_579_p4 = {{bitcast_ln72_fu_575_p1[30:23]}};

assign tmp_12_fu_479_p3 = {{59'd0}, {or_ln64_fu_473_p2}};

assign tmp_15_fu_980_p4 = {{sh_amt_3_fu_975_p2[8:5]}};

assign tmp_16_fu_1090_p3 = reg_V_1_reg_1414[32'd31];

assign tmp_2_fu_728_p3 = {{1'd1}, {trunc_ln270_reg_1358}};

assign tmp_3_fu_460_p3 = {{t_V_reg_248}, {2'd0}};

assign tmp_4_fu_955_p3 = {{1'd1}, {trunc_ln270_1_reg_1424}};

assign tmp_5_fu_753_p4 = {{sh_amt_1_fu_748_p2[8:5]}};

assign tmp_6_fu_547_p4 = {{p_Val2_2_fu_522_p1[30:23]}};

assign tmp_7_fu_492_p4 = {{configReg_q0[30:23]}};

assign tmp_9_fu_899_p3 = reg_V_reg_1348[32'd31];

assign trunc_ln124_fu_488_p1 = configReg_q0[3:0];

assign trunc_ln257_1_fu_502_p1 = configReg_q0[22:0];

assign trunc_ln257_fu_530_p1 = p_Val2_2_fu_522_p1[22:0];

assign trunc_ln262_1_fu_845_p1 = reg_V_1_fu_841_p1[30:0];

assign trunc_ln262_fu_680_p1 = reg_V_fu_676_p1[30:0];

assign trunc_ln270_1_fu_871_p1 = reg_V_1_fu_841_p1[22:0];

assign trunc_ln270_fu_706_p1 = reg_V_fu_676_p1[22:0];

assign trunc_ln368_fu_526_p1 = p_Val2_2_fu_522_p1[30:0];

assign trunc_ln72_fu_589_p1 = bitcast_ln72_fu_575_p1[22:0];

assign xor_ln104_1_fu_416_p2 = (or_ln99_fu_395_p2 ^ 1'd1);

assign xor_ln104_fu_405_p2 = (readyLch ^ 1'd1);

assign xor_ln278_1_fu_1002_p2 = (icmp_ln278_1_reg_1429 ^ 1'd1);

assign xor_ln278_fu_775_p2 = (icmp_ln278_reg_1363 ^ 1'd1);

assign xor_ln282_1_fu_1024_p2 = (or_ln282_1_fu_1020_p2 ^ 1'd1);

assign xor_ln282_fu_797_p2 = (or_ln282_fu_793_p2 ^ 1'd1);

assign xor_ln284_1_fu_1056_p2 = (or_ln284_1_fu_1050_p2 ^ 1'd1);

assign xor_ln284_fu_829_p2 = (or_ln284_fu_823_p2 ^ 1'd1);

assign xor_ln285_1_fu_1128_p2 = (icmp_ln285_1_reg_1461 ^ 1'd1);

assign xor_ln285_fu_937_p2 = (icmp_ln285_reg_1389 ^ 1'd1);

assign xor_ln71_fu_633_p2 = (bitcast_ln71_fu_630_p1 ^ 32'd2147483648);

assign xor_ln99_fu_400_p2 = (lrclk_V_0_data_reg ^ 1'd1);

assign zext_ln124_fu_468_p1 = tmp_3_fu_460_p3;

assign zext_ln215_fu_362_p1 = r_V_fu_352_p4;

assign zext_ln283_1_fu_1084_p1 = tmp_4_reg_1456;

assign zext_ln283_fu_893_p1 = tmp_2_reg_1384;

assign zext_ln285_1_fu_1111_p1 = select_ln285_2_reg_1476;

assign zext_ln285_fu_920_p1 = select_ln285_reg_1404;

assign zext_ln544_1_fu_428_p1 = r_V_reg_1179;

assign zext_ln544_2_fu_1146_p1 = ret_V_1_reg_1486;

assign zext_ln544_fu_372_p1 = ret_V_reg_1189;

always @ (posedge ap_clk) begin
    zext_ln215_reg_1184[30] <= 1'b0;
    configReg_addr_1_reg_1279[1:0] <= 2'b01;
    labs_reg_1309[31] <= 1'b0;
    tmp_2_reg_1384[23] <= 1'b1;
    tmp_4_reg_1456[23] <= 1'b1;
end

endmodule //pynq_dsp_hls
